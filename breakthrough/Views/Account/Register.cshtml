@{
    ViewBag.Title = "Register";
}

@model breakthrough.Models.User

<div class="text-center">
    <h2>Create an account</h2>
    <br />
</div>
<form asp-action="Register" method="post">
    <div class="form-floating mb-3">
        <input id="floatingName" class="form-control @(ViewData.ModelState["Name"]?.Errors.Count > 0 ? "is-invalid" : "")" type="text" name="Name" placeholder="Enter Fullname" required />
        <label for="floatingName">Name</label>
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "invalid-feedback" })
    </div>

    <div class="form-floating mb-3">
        <input id="floatingBirthdate" class="form-control @(ViewData.ModelState["Birthdate"]?.Errors.Count > 0 ? "is-invalid" : "")" type="date" name="Birthdate" required />
        <label for="floatingBirthdate">Birthdate</label>
        @Html.ValidationMessageFor(model => model.Birthdate, "", new { @class = "invalid-feedback" })
    </div>

    <div class="form-floating mb-3">
        <input id="floatingPhoneNumber" class="form-control @(ViewData.ModelState["PhoneNumber"]?.Errors.Count > 0 ? "is-invalid" : "")" type="text" name="PhoneNumber" placeholder="Enter Phone number" required />
        <label for="floatingPhoneNumber">Phone Number</label>
        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "invalid-feedback" })
    </div>

    <div class="form-floating mb-3">
        <input id="floatingEmail" class="form-control @(ViewData.ModelState["Email"]?.Errors.Count > 0 ? "is-invalid" : "")" type="email" name="Email" placeholder="Enter email" required />
        <label for="floatingEmail">Email</label>
        <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "invalid-feedback" })
    </div>

    <div class="form-floating mb-3">
        <input id="floatingPassword" class="form-control @(ViewData.ModelState["Password"]?.Errors.Count > 0 ? "is-invalid" : "")" type="password" name="Password" placeholder="Enter Password" required />
        <label for="floatingPassword">Password</label>
        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "invalid-feedback" })
    </div>

    <div class="form-floating mb-3">
        <input id="floatingConfirmPassword" class="form-control @(ViewData.ModelState["ConfirmPassword"]?.Errors.Count > 0 ? "is-invalid" : "")" type="password" name="ConfirmPassword" placeholder="Confirm Password" required />
        <label for="floatingConfirmPassword">Confirm Password</label>
        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "invalid-feedback" })
    </div>

    <div class="form-floating mb-3">
        <select id="floatingRole" class="form-control custom-select @(ViewData.ModelState["Role"]?.Errors.Count > 0 ? "is-invalid" : "")" name="Role" required>
            <option value="">Select a role...</option>
            <option value="Leader">Leader</option>
            <option value="Member">Member</option>
        </select>
        <label for="floatingRole">Role</label>
        @Html.ValidationMessageFor(model => model.Role, "", new { @class = "invalid-feedback" })
    </div>

    <div class="d-grid gap-2">
        <button class="btn btn-primary btn-lg" type="submit">Register</button>
    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
</form>
<div>
    <br />
</div>
